datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          UserRole        @default(USER)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ExpenseAccount     ExpenseAccount[]
  ExpenseTransaction ExpenseTransaction[]
  ExpenseTags        ExpenseTags[]
  Loan               Loan[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

/// **** Expenses  ****

/// accounts
model ExpenseAccount {
  id          String @id @map("_id")
  userId      String @db.ObjectId
  name        String
  description String @default("")
  type        String
  config      Json

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ExpenseTransaction ExpenseTransaction[]

  @@unique([userId, name])
  @@map("expense_accounts")
}

/// transactions
model ExpenseTransaction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  account     String
  amount      Float    @default(0)
  description String   @default("")
  type        String   @default("Expense")
  tags        String[] @default([])
  date        DateTime @default(now())
  dateZ       String   @default("")

  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountObj ExpenseAccount @relation(fields: [account], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("expense_transactions")
}

model ExpenseTags {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  tag    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("expense_tags")
}

/// **** Expenses  ****

/// **** Loans ****

enum PaymentFrequency {
  BIWEEKLY
  MONTHLY
}

model Loan {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  userId         String           @db.ObjectId
  name           String
  description    String           @default("")
  amount         Float
  interestRate   Float
  emi            Float
  durationMonths Int
  startDate      DateTime
  frequency      PaymentFrequency @default(MONTHLY)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  loanRates         LoanRates[]
  loanExtraPayments LoanExtraPayments[]

  @@map("loans")
}

model LoanRates {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  loanId String   @db.ObjectId
  rate   Float
  date   DateTime

  loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("loan_rates")
}

model LoanExtraPayments {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  loanId   String   @db.ObjectId
  amount   Float
  date     DateTime
  continue Boolean  @default(false)

  loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("loan_extra_payments")
}

/// **** Loans ****
